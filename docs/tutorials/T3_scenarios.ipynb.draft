{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "94ebf73d",
   "metadata": {},
   "source": [
    "# FPsim Intervention Scenarios\n",
    "---------------\n",
    "\n",
    "With FPsim's user-friendly Scenarios API, we can easily setup and compare multiple intervention scenarios against one another to better understand the complex interactions between demographics and family planning behavior.\n",
    "\n",
    "1. [Introduction](#introduction)\n",
    "2. [Setup](#setup)\n",
    "3. [Efficacy](#efficacy)\n",
    "4. [Switching](#switching)\n",
    "5. [Initialization/Discontinuation](#initialization)\n",
    "6. [Parameter changes](#parameter)\n",
    "7. [Custom interventions](#custom)\n",
    "8. [Comparison](#comparison)\n",
    "9. [Appendix](#appendix)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32dbb21b",
   "metadata": {},
   "source": [
    "# Introduction <a name=\"introduction\"></a>\n",
    "-------------\n",
    "FPsim is a useful tool for understanding how demographics, contraceptive efficacy, and contraceptive uptake behaviors interact with one another. We will be going through a couple of scenarios using our \"Scenarios\" api, which makes it easier for researchers to customize and compare the results of family planning interventions.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "723b1323",
   "metadata": {},
   "source": [
    "# Setup <a name=\"setup\"></a>\n",
    "-----------\n",
    "#### A simple guide on how to set up a basic intervention scenario\n",
    "\n",
    "Everytime we run an experiment, we want to:\n",
    "- Run simulations with one as the control and one or more as experimental\n",
    "- Compare the results between the control sim and experimental sim(s)\n",
    "\n",
    "The Scenarios object encapsulates this type of inquiry. Each Scenario represents a\n",
    "distinct set of simulation parameters. Once each Scenario is added\n",
    "to the Scenarios object, the Scenarios object allows the user to run\n",
    "simulations easily, and compare the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e6a376e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sciris as sc\n",
    "import fpsim as fp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1d9f015",
   "metadata": {},
   "outputs": [],
   "source": [
    "# n (initial population) is a parameter one can increase or decrease to make \n",
    "# the output more or less detailed and make the runtime longer or shorter\n",
    "n = 500 \n",
    "\n",
    "# First we create a Scenario object where:\n",
    "#    eff is the dictionary of specifications for how we want to change efficacy\n",
    "#    year is the year we want to implement the change\n",
    "#    label is how we want to label the scenario in the visualization\n",
    "scenario = fp.make_scen(eff={'Injectables':0}, year=2000, label='Decreased efficacy of injectables')\n",
    "\n",
    "# Then we add it to the Scenarios object which is used to compare results across multiple scenarios\n",
    "#    repeats defines how many times to run the simulation for each Scenario in order to determine uncertainty intervals.\n",
    "#    location defines some preset parameters for a speedy sim run (in this case: verbose=False, 10 year run)\n",
    "sim_parameters = {\"n\": n, \"location\": \"test\", \"repeats\": 3}\n",
    "scenarios = fp.Scenarios(scens=scenario, **sim_parameters)\n",
    "\n",
    "# We are going to add a baseline for comparison\n",
    "baseline = fp.make_scen(label=\"Baseline\")\n",
    "scenarios.add_scen(baseline)\n",
    "\n",
    "# Now that we have the scenario specifications, we can run the simulations\n",
    "scenarios.run()\n",
    "\n",
    "# To examine the resulting demoraphic features of the scenario we can use the plot_scens() function\n",
    "scenarios.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a908dd0",
   "metadata": {},
   "source": [
    "# Efficacy <a name=\"efficacy\"></a>\n",
    "---------\n",
    "#### How to to compare sim results across different contraceptive efficacies"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9048b5d2",
   "metadata": {},
   "source": [
    "Let's suppose we want to better understand how features of the population change at varying levels of efficacy of modern contraceptive methods. For this task we would create three specification dictionaries, add them to scenarios, and then run."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d807cd1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# For any cell, one can change the initial population by setting: sim__parameters['n']\n",
    "# In order to compare different scenarios to one another we must:\n",
    "\n",
    "# Define the different scenarios\n",
    "injectables_1 = fp.make_scen(eff={'Injectables':1.0}, year=2000, label='Injectables high efficacy')\n",
    "\n",
    "injectables_05 = fp.make_scen(eff={'Injectables':0.5}, year=2000, label='Injectables moderate efficacy')\n",
    "\n",
    "injectables_0 = fp.make_scen(eff={'Injectables':0}, year=2000, label='Injectables low efficacy')\n",
    "\n",
    "# Add to scenarios object\n",
    "scens_eff = fp.Scenarios(scens=[injectables_1, injectables_05, injectables_0, baseline], **sim_parameters)\n",
    "\n",
    "# Run scenarios\n",
    "scens_eff.run()\n",
    "\n",
    "# Compare results\n",
    "scens_eff.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f29a2491",
   "metadata": {},
   "source": [
    "## Initialization and Discontinuation <a name=\"initialization\"></a> \n",
    "--------\n",
    "#### How to examine  initialization and discontinutation rates\n",
    "It is often important to examine the probability of beginning a contraceptive method or terminating it. The below steps will demonstrate how to compare varying initialization and discontinuation rates using Scenario keyword arguments:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6bef8ce2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We can set the initialization factor by using the \"method\" and \"init_factor\" args\n",
    "# This multiplies the probability of switching from None -> method by the value specified in \"init_factor\"\n",
    "# One can also set the value explicitly with init_value\n",
    "kwargs = {'method': 'Injectables', 'year': 2000}\n",
    "high_init = fp.make_scen(label=\"High initialization\", init_factor=1.5, **kwargs)\n",
    "medium_init = fp.make_scen(label=\"Medium initialization\", init_factor=1.2, **kwargs)\n",
    "low_init = fp.make_scen(label=\"Low initialization\", init_factor=0.7, **kwargs)\n",
    "\n",
    "scens_initialization = fp.Scenarios(scens=[high_init, medium_init, low_init, baseline], **sim_parameters)\n",
    "scens_initialization.run()\n",
    "scens_initialization.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "492eca24",
   "metadata": {},
   "outputs": [],
   "source": [
    "# discont_factor and discont_value are equivalent to init_factor/value except that they affect probability\n",
    "# of transition from method -> None\n",
    "high_dis = fp.make_scen(label=\"High discontinuation\", discont_factor=1.5, **kwargs)\n",
    "medium_dis = fp.make_scen(label=\"Medium discontinuation\", discont_factor=1.2, **kwargs)\n",
    "low_dis = fp.make_scen(label=\"Low discontinuation\", discont_factor=0.7, **kwargs)\n",
    "\n",
    "scens_discont = fp.Scenarios(scens=[low_dis, medium_dis, high_dis], **sim_parameters)\n",
    "scens_discont.run()\n",
    "scens_discont.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea293c7e",
   "metadata": {},
   "source": [
    "### **Neat trick**\n",
    "One great feature of Scenario objects is that you can add them together. So we could combine the above scenarios:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd76ab17",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_scenario = high_init + low_dis\n",
    "new_scenario2 = low_init + high_dis\n",
    "new_scenario.label = \"High initialization low discontinuation\"\n",
    "new_scenario2.label = \"Low initialization high discontinuation\"\n",
    "\n",
    "scens_combined = fp.Scenarios(scens=[new_scenario, new_scenario2, baseline], **sim_parameters)\n",
    "scens_combined.run()\n",
    "scens_combined.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25c733a3",
   "metadata": {},
   "source": [
    "# Switching <a name=\"switching\"></a>\n",
    "-----------\n",
    "#### How to compare sim results across different switching probabilities.\n",
    "\n",
    "If we want to understand how the probability of switching from one contraceptive to another affects a population, we may want to sweep this probability and examine the results. Below is how we would do this using Scenarios:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3de31cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Within our scenario we can adjust the probability of switching from one intervention (source) to another (dest).\n",
    "# For the purpose of granular analysis we can even target specific ages (ages), and postpartum status which often affects\n",
    "# a women's contraceptive uptake behavior. In the below example we target women that are not postpartum\n",
    "kwargs = {'source': 'Injectables', 'dest': 'Other modern', 'year': 2000, 'ages': [\"18-20\", \"21-25\", \"26-35\"], 'matrix': 'annual'}\n",
    "high_switching = fp.make_scen(value=1.0, label=\"high switching\", **kwargs)\n",
    "medium_switching = fp.make_scen(value=0.5, label=\"medium switching\", **kwargs)\n",
    "low_switching = fp.make_scen(value=0.0, label=\"low switching\", **kwargs)\n",
    "\n",
    "# Then we pass these scenarios into the Scenarios object as before\n",
    "scens_switching = fp.Scenarios(scens=[high_switching, medium_switching, low_switching, baseline], **sim_parameters)\n",
    "scens_switching.run()\n",
    "\n",
    "# Some custom colors for the plot, also works with custom methods\n",
    "method_colors = {\n",
    "    'Withdrawal'        : [0.3, 0.3, 0.3],\n",
    "    'Other traditional' : [0.5, 0.5, 0.5],\n",
    "    'Condoms'           : [0.7, 0.7, 0.7],\n",
    "    'Pill'              : [0.3, 0.8, 0.9],\n",
    "    'Injectables'       : [0.6, 0.4, 0.9],\n",
    "    'Implants'          : [0.4, 0.2, 0.9],\n",
    "    'IUDs'              : [0.0, 0.0, 0.9],\n",
    "    'BTL'               : [0.8, 0.0, 0.0],\n",
    "    'Other modern'      : [0.8, 0.5, 0.5]\n",
    "    }\n",
    "\n",
    "scens_switching.plot(to_plot='method', colors=method_colors)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7372f356",
   "metadata": {},
   "source": [
    "# Parameter changes <a name=\"parameter\"></a>\n",
    "-----------\n",
    "#### How to change any parameter in the sim at a given year\n",
    "Anything from the probabilitity of having twins to the exposure factor can be adjusted easily through keyword arguments: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d69552f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Here we want to compare different probabilities of giving birth to twins\n",
    "kwargs = {'par':'twins_prob', 'par_years':2000}\n",
    "low_twins = fp.make_scen(label=\"Low twins\", par_vals=0.1, **kwargs)\n",
    "medium_twins = fp.make_scen(label=\"Medium twins\", par_vals=0.5, **kwargs)\n",
    "high_twins = fp.make_scen(label=\"High twins\", par_vals=1.0, **kwargs)\n",
    "\n",
    "scens_combined = fp.Scenarios(scens=[low_twins, medium_twins, high_twins, baseline], **sim_parameters)\n",
    "scens_combined.run()\n",
    "scens_combined.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e3a3898",
   "metadata": {},
   "source": [
    "Specifically you can change any parameter in **People.pars** or **Sim.people.pars**, an exhaustive list of which can be found with `Scenarios.msims[0].pars.keys()`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af4fb033",
   "metadata": {},
   "source": [
    "# Custom interventions <a name=\"custom\"></a>\n",
    "------------\n",
    "#### How to define a function that changes something in the model as it runs\n",
    "As a sim runs, it applies \"interventions\" at each step. We've utilized built-in interventions from **Scenarios** for the past few sections. If none of the existing interventions are sufficient, it is possible to define and run one's own intervention:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0edade6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# At each step, the sim itself is passed into the intervention. This allows\n",
    "# the user to access and change sim.People.pars, or parameters of the sim\n",
    "\n",
    "# To acomplish the \"high twins\" scenario from before, we would say:\n",
    "def update_sim(sim): \n",
    "    if sim.y == 2000.0:\n",
    "        sim.people.pars['twins_prob'] = 1.0\n",
    "        \n",
    "custom_scenario = fp.make_scen(interventions=update_sim, label=\"Custom intervention - Increased twins\")\n",
    "        \n",
    "new_scen = fp.Scenarios(scens=[custom_scenario, baseline], **sim_parameters)\n",
    "new_scen.run()\n",
    "\n",
    "new_scen.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9df0bbb",
   "metadata": {},
   "source": [
    "**Warning**: This is an advanced use of Scenarios and requires some knowledge of the inner workings of the **Sim** class"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c031914",
   "metadata": {},
   "source": [
    "# Comparison <a name=\"comparison\"></a>\n",
    "---------\n",
    "#### How to compare sim results in different ways\n",
    "\n",
    "The Scenarios object has a number of methods for plotting results across different scenarios. **plot()** gives us a grid of relevant plots about the Scenarios with confidence intervals derived from the seeds of each Scenario. There are also custom sets of visualizations accessed by the **to_plot** parameter, with themes such as adverse pregnancy outcomes and mortality.\n",
    "\n",
    "**plot_sims()** is similar but shows us the results of each individual sim run, and **analyze_sims()** logs the results of the run as a pandas DataFrame."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71f40b68",
   "metadata": {},
   "source": [
    "### **plot(to_plot='method')**\n",
    "\n",
    "If we are more interested in the prevalence of certain contraceptive methods, we can use use the 'method' specification. These plots show how prevalent each method is over the course of the simulation for each scenario. This also allows us to examine the prevalence of custom contraceptive methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7a85be0",
   "metadata": {},
   "outputs": [],
   "source": [
    "scens_initialization.plot(to_plot='method', colors=method_colors)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "051bdb36",
   "metadata": {},
   "source": [
    "### **plot(to_plot='apo')**\n",
    "\n",
    "We use 'apo' to specify that we want to analyze adverse pregnancy outcomes for each Scenario."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1da816a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "scens_initialization.plot(to_plot='apo')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e563ce3a",
   "metadata": {},
   "source": [
    "### **plot(to_plot='cpr')**\n",
    "\n",
    "We use 'cpr' to specify that we want to analyze contraceptive prevalence rates for each Scenario."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94712dce",
   "metadata": {},
   "outputs": [],
   "source": [
    "scens_initialization.plot(to_plot='cpr')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b22e677f",
   "metadata": {},
   "source": [
    "### **plot_sims()**\n",
    "\n",
    "Plot sims is useful for when we want to understand the specific results of each individual sim for a given scenario. Although a group of sims for a single scenario should all have the same parameters, a difference in seed can produce a significant effect."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a491139a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Single scenario with 3 runs\n",
    "scens_initialization.plot_sims()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9dcd77f",
   "metadata": {},
   "source": [
    "### **analyze_sims()**\n",
    "\n",
    "Lastly, if we want to create our own quick custom visualization or perform post hoc analysis, analyze_sims() let's us log the data as a dictionary or dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64ad0b2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "scens_initialization.analyze_sims()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42aa12da",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dataframe format let's use the built-in dataframe functions for a quick, aggregate view of the results\n",
    "df = scenarios.results.df\n",
    "\n",
    "ax = df.plot.scatter(x=\"mcpr\", y=\"popsize\")\n",
    "df.head() # uncomment to see schema of DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08ad46de",
   "metadata": {},
   "outputs": [],
   "source": [
    "# If we want some summary statistics on the results of the scenarios, we can view the results as a dictinary using .stats\n",
    "scens_eff.results.stats"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66623aba",
   "metadata": {},
   "source": [
    "# Appendix <a name=\"appendix\"></a>\n",
    "#### An exhaustive list of arguments for the classes and functions used in this notebook\n",
    "------------------------------------\n",
    "\n",
    "# Objects\n",
    "-----------------------------\n",
    "\n",
    "### Scenario\n",
    "*Arguments not specific to to the type of scenario:*\n",
    "\n",
    "- **spec**   (dict): a pre-made specification of a scenario; see keyword explanations below (optional)\n",
    "\n",
    "\n",
    "- **args**   (list): additional specifications (optional)\n",
    "\n",
    "\n",
    "- **label**  (str): the label to use for this scenario for plotting output\n",
    "\n",
    "\n",
    "- **pars**   (dict): optionally supply additional sim parameters to use with this scenario (that take effect at the beginning of the sim, not at the point of intervention)\n",
    "\n",
    "\n",
    "- **year**   (float): the year at which to activate efficacy and probability scenarios\n",
    "\n",
    "\n",
    "- **matrix** (str): which set of method probabilities to modify for probability scenarios, options are method probabilities for people who are one to six months postpartum,  up to one month postpartum, and all method probabilities respectively:\n",
    "\n",
    "    [\"pp1to6\", \"pp0to1\", \"annual\"]\n",
    "    \n",
    "\n",
    "\n",
    "- **ages**   (str/list): the age group(s) targeted which can be any from :\n",
    "\n",
    "     ['<18', '18-20', '21-25', '26-35', '>35', 'None', 'all']\n",
    "     \n",
    "     \n",
    "\n",
    "*Arguments related to efficacy:*\n",
    "\n",
    "- **eff**   (dict): a dictionary of method names and new efficacy values. Methods can be any from \n",
    "\n",
    "    ['None', 'Pill', 'IUDs', 'Injectables', 'Condoms', 'BTL', 'Withdrawal', 'Implants', 'Other traditional', 'Other modern')\n",
    "    \n",
    "\n",
    "\n",
    "*Argments related to method change probability*\n",
    "\n",
    "- **source** (str): the method to switch from (enumerated above)\n",
    "\n",
    "\n",
    "- **dest** (str): the method to switch to (enumerated above)\n",
    "\n",
    "\n",
    "- **factor** (float): if supplied, multiply the probability of switching from source to dest by this amount\n",
    "\n",
    "\n",
    "- **value** (float): if supplied instead of factor, replace the probability of switching from source to dest to this value\n",
    "\n",
    "\n",
    "- **copy_from** (str): if supplied, copy probabilities from the given method\n",
    "\n",
    "\n",
    "*Arguments related to initialization and discontinutation*\n",
    "\n",
    "- **method** (str): name of the method that will have its initialization or discontinuation rate modified\n",
    "\n",
    "\n",
    "- **init_factor** (float): as with \"factor\" above, for initialization (transition from None → method)\n",
    "\n",
    "\n",
    "- **discont_factor** (float): as with \"factor\" above, for discontinuation (transition from method → None)\n",
    "\n",
    "\n",
    "- **init_value** (float): as with \"value\" above, for initialization (transition from None → method)\n",
    "\n",
    "\n",
    "- **discont_value** (float): as with \"value\" above, for discontinuation (transition from method → None)\n",
    "\n",
    "\n",
    "*Arguments related to changing a parameter*\n",
    "\n",
    "- **par** (str): the parameter to of the sim to modify, can be any of the parameters in sim.pars. For an exhaustive list of parameters that can be modified, one can use Scenarios.msims[0].pars.keys()\n",
    "\n",
    "\n",
    "- **par_years** (float/list): the year(s) at which to apply the modifications, for example, 1960.0\n",
    "\n",
    "\n",
    "- **par_vals** (float/list): the value(s) of the parameter for each year. If multiple values are provided, the length must match par_years\n",
    "\n",
    "\n",
    "*Arguments related to custom interventions*\n",
    "\n",
    "- **interventions** (Intervention/list): any custom intervention(s) to be applied to the scenario. This is a function of the format *intervention_name(sim)* which is applied to sim at each timestep\n",
    "\n",
    "\n",
    "### Scenarios\n",
    "\n",
    "*Arguments*\n",
    "\n",
    "- **pars** (dict): parameters to pass into the sim. For example, {\"n\": 500} which modifies sim['n'] for each sim in Scenarios.msims\n",
    "\n",
    "\n",
    "- **repeats** (int): how many repeats of each scenario to run to determine variation intervals in the output\n",
    "\n",
    "\n",
    "- **scens** (list): the list of Scenario objects to run; see also fp.make_scen() and Scenarios.add_scen()\n",
    "\n",
    "\n",
    "# Functions\n",
    "-----------\n",
    "\n",
    "### fpsim.make_scen(args, **kwargs)\n",
    "\n",
    "*Arguments*\n",
    "\n",
    "This contains all the same arguments as Scenario and is equivalent to calling Scenario(args)\n",
    "\n",
    "\n",
    "### Scenarios.add_scen(scen=None, label=None)\n",
    "\n",
    "*Arguments*\n",
    "\n",
    "- **scen** (Scenario): Scenario object to be added to Scenarios\n",
    "\n",
    "\n",
    "- **label** (str): sets Scenario.label for the Scenario object that is added\n",
    "\n",
    "### Scenario(s).run(*args, **kwargs)\n",
    "\n",
    "*Arguments*\n",
    "\n",
    "This function passes all arguments directly into MultiSim.run(), so has the same arguments as MultiSim.run()\n",
    "\n",
    "\n",
    "\n",
    "### Scenarios.plot(to_plot=None, plot_sims=True, **kwargs)\n",
    "\n",
    "*Arguments*\n",
    "\n",
    "- **to_plot** (str): specifies the type of plotting output. Can be any of \n",
    "\n",
    "    [\"default\", \"cpr\", \"mortality\", \"apo\"]\n",
    "    \n",
    "    for more information on what each of these types actually show, please refer to the [source code](https://github.com/amath-idm/fpsim/blob/4ce7f0cb59461cff560339e7a234514494c6f0b7/fpsim/sim.py#L1320)\n",
    "    \n",
    "    \n",
    "- **plot_sims** (bool): whether to plot individual sims (else, plot with uncertainty bands)\n",
    "\n",
    "\n",
    "- **kwargs**: other keyword arguments that are passed directly into MultiSim.plot()\n",
    "\n",
    "### Scenarios.plot_sims(to_plot=None, plot_sims=True, **kwargs)\n",
    "\n",
    "*Arguments*\n",
    "\n",
    "- **to_plot** (str): same as above\n",
    "\n",
    "\n",
    "- **plot_sims** (str): same as above\n",
    "\n",
    "\n",
    "- **kwargs**: keyword arguments passed directly into MultiSim.plot() for each MutltiSim in Scenarios.msims\n",
    "\n",
    "### Scenarios.analyze_sims(start=None, end=None)\n",
    "\n",
    "*Arguments*\n",
    "\n",
    "- **start** (float): the first year to be included in the output. By default this is the first year of the sim\n",
    "\n",
    "\n",
    "- **end** (float): the last year to be included in the output. By default this is the last year in the sim"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c5491d8",
   "metadata": {},
   "source": [
    "# Further Exploration\n",
    "---------\n",
    "### For more info check out the [source code](https://github.com/amath-idm/fpsim)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
